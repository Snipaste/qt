/****************************************************************************
**
** Copyright (C) 2021 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the documentation of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:FDL$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** GNU Free Documentation License Usage
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of
** this file. Please review the following information to ensure
** the GNU Free Documentation License version 1.3 requirements
** will be met: https://www.gnu.org/licenses/fdl-1.3.html.
** $QT_END_LICENSE$
**
****************************************************************************/

/*!
\group cmake-variables-qtcore
\title CMake Variables in Qt6 Core

The following CMake variables are defined when Qt6::Core is loaded, for instance
with

\badcode
find_package(Qt6 REQUIRED COMPONENTS Core)
\endcode

\sa{CMake Variable Reference}
*/

*/*!
\page cmake-variable-ANDROID_NDK_HOST_SYSTEM_NAME.html
\ingroup cmake-variables
\ingroup cmake-variables-qtcore

\title ANDROID_NDK_HOST_SYSTEM_NAME
\target cmake-variable-ANDROID_NDK_HOST_SYSTEM_NAME

\summary {Android-specific architecture of the host system.}

\cmakevariablesince 6.0
\preliminarycmakevariable
\cmakevariableandroidonly

This is normally set by the Android NDK toolchain file. It is written out as
part of the deployment settings for a target.

\sa{qt6_android_generate_deployment_settings}{qt_android_generate_deployment_settings()}
*/

/*!
\page cmake-variable-ANDROID_SDK_ROOT.html
\ingroup cmake-variables
\ingroup cmake-variables-qtcore

\title ANDROID_SDK_ROOT
\target cmake-variable-ANDROID_SDK_ROOT

\summary {Location of the Android SDK.}

\cmakevariablesince 6.0
\preliminarycmakevariable
\cmakevariableandroidonly

This specifies the location of the Android SDK when building for the Android platform.
It is written out as part of the deployment settings for a target.

\sa{qt6_android_generate_deployment_settings}{qt_android_generate_deployment_settings()}.
*/

/*!
\page cmake-variable-QT_ANDROID_APPLICATION_ARGUMENTS.html
\ingroup cmake-variables
\ingroup cmake-variables-qtcore

\title QT_ANDROID_APPLICATION_ARGUMENTS
\target cmake-variable-QT_ANDROID_APPLICATION_ARGUMENTS

\summary {List of arguments to pass to Android applications.}

\cmakevariablesince 6.0
\preliminarycmakevariable
\cmakevariableandroidonly

This contains a list of arguments to be passed to Android applications. It is written
out as part of the deployment settings for a target.

\sa{qt6_android_generate_deployment_settings}{qt_android_generate_deployment_settings()}
*/

/*!
\page cmake-variable-QT_HOST_PATH.html
\ingroup cmake-variables
\ingroup cmake-variables-qtcore

\title QT_HOST_PATH
\target cmake-variable-QT_HOST_PATH

\summary {Location of the host Qt installation when cross-compiling.}

\cmakevariablesince 6.0
\preliminarycmakevariable

When cross-compiling, this must be set to the install location of Qt for the host
platform. It is used to locate tools to be run on the host (\l{moc}, \l{rcc},
\l{androiddeployqt}, and so on).
*/

/*!
\page cmake-variable-QT_NO_SET_XCODE_DEVELOPMENT_TEAM_ID.html
\ingroup cmake-variables
\ingroup cmake-variables-qtcore

\title QT_NO_SET_XCODE_DEVELOPMENT_TEAM_ID
\target cmake-variable-QT_NO_SET_XCODE_DEVELOPMENT_TEAM_ID

\summary {Disables providing a fallback team ID during target finalization on iOS.}

\cmakevariablesince 6.1

When finalizing an executable target on iOS,
\l{qt6_finalize_target}{qt_finalize_target()} will populate the target's
\c XCODE_ATTRIBUTE_DEVELOPMENT_TEAM property if it hasn't been set.
Set \c QT_NO_SET_XCODE_DEVELOPMENT_TEAM_ID to true if you want to prevent this.
*/

/*!
\page cmake-variable-QT_NO_SET_XCODE_BUNDLE_IDENTIFIER.html
\ingroup cmake-variables
\ingroup cmake-variables-qtcore

\title QT_NO_SET_XCODE_BUNDLE_IDENTIFIER
\target cmake-variable-QT_NO_SET_XCODE_BUNDLE_IDENTIFIER

\summary {Disables providing a fallback app bundle ID during target finalization on iOS.}

\cmakevariablesince 6.1

When finalizing an executable target on iOS,
\l{qt6_finalize_target}{qt_finalize_target()} will populate the target's
\c XCODE_ATTRIBUTE_PRODUCT_BUNDLE_IDENTIFIER and
\c MACOSX_BUNDLE_GUI_IDENTIFIER properties if they haven't been set.
Set \c QT_NO_SET_XCODE_BUNDLE_IDENTIFIER to true if you want to prevent this.
*/
