import QtQuick.tooling 1.2

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.
//
// This file was auto-generated by:
// 'qmlplugindump -nonrelocatable QtOpcUa 5.13'

Module {
    dependencies: ["QtQuick 2.12"]
    Component {
        name: "Constants"
        exports: ["QtOpcUa/Constants 5.12"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
    }
    Component {
        name: "OpcUaConnection"
        prototype: "QObject"
        exports: ["QtOpcUa/Connection 5.12"]
        exportMetaObjectRevisions: [0]
        Property { name: "availableBackends"; type: "QStringList"; isReadonly: true }
        Property { name: "connected"; type: "bool"; isReadonly: true }
        Property { name: "backend"; type: "string" }
        Property { name: "defaultConnection"; type: "bool" }
        Property { name: "namespaces"; type: "QStringList"; isReadonly: true }
        Property { name: "authenticationInformation"; type: "QOpcUaAuthenticationInformation" }
        Signal {
            name: "readNodeAttributesFinished"
            Parameter { name: "value"; type: "QVariant" }
        }
        Method {
            name: "connectToEndpoint"
            Parameter { name: "endpointDescription"; type: "QOpcUaEndpointDescription" }
        }
        Method { name: "disconnectFromEndpoint" }
        Method {
            name: "setDefaultConnection"
            Parameter { name: "defaultConnection"; type: "bool" }
        }
        Method { name: "setDefaultConnection" }
        Method {
            name: "setAuthenticationInformation"
            Parameter { name: "authenticationInformation"; type: "QOpcUaAuthenticationInformation" }
        }
        Method {
            name: "readNodeAttributes"
            type: "bool"
            Parameter { name: "value"; type: "QJSValue" }
        }
    }
    Component {
        name: "OpcUaEndpointDiscovery"
        prototype: "QObject"
        exports: ["QtOpcUa/EndpointDiscovery 5.13"]
        exportMetaObjectRevisions: [0]
        Property { name: "serverUrl"; type: "string" }
        Property { name: "count"; type: "int"; isReadonly: true }
        Property { name: "status"; type: "OpcUaStatus"; isReadonly: true }
        Property { name: "connection"; type: "OpcUaConnection"; isPointer: true }
        Signal {
            name: "serverUrlChanged"
            Parameter { name: "serverUrl"; type: "string" }
        }
        Signal { name: "endpointsChanged" }
        Signal {
            name: "connectionChanged"
            Parameter { type: "OpcUaConnection"; isPointer: true }
        }
        Method {
            name: "at"
            type: "QOpcUaEndpointDescription"
            Parameter { name: "row"; type: "int" }
        }
    }
    Component {
        name: "OpcUaMethodArgument"
        prototype: "QObject"
        exports: ["QtOpcUa/MethodArgument 5.13"]
        exportMetaObjectRevisions: [0]
        Property { name: "value"; type: "QVariant" }
        Property { name: "type"; type: "QOpcUa::Types" }
        Method {
            name: "setValue"
            Parameter { name: "value"; type: "QVariant" }
        }
        Method {
            name: "setType"
            Parameter { name: "type"; type: "QOpcUa::Types" }
        }
    }
    Component {
        name: "OpcUaMethodNode"
        prototype: "OpcUaNode"
        exports: ["QtOpcUa/MethodNode 5.12"]
        exportMetaObjectRevisions: [0]
        Property { name: "objectNodeId"; type: "OpcUaNodeIdType"; isPointer: true }
        Property { name: "inputArguments"; type: "OpcUaMethodArgument"; isList: true; isReadonly: true }
        Property { name: "outputArguments"; type: "QVariantList"; isReadonly: true }
        Property { name: "resultStatus"; type: "OpcUaStatus"; isReadonly: true }
        Signal {
            name: "resultStatusChanged"
            Parameter { name: "status"; type: "OpcUaStatus" }
        }
        Method {
            name: "setObjectNodeId"
            Parameter { name: "nodeId"; type: "OpcUaNodeIdType"; isPointer: true }
        }
        Method { name: "callMethod" }
    }
    Component {
        name: "OpcUaNode"
        prototype: "QObject"
        exports: ["QtOpcUa/Node 5.12"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "Status"
            values: {
                "Valid": 0,
                "InvalidNodeId": 1,
                "NoConnection": 2,
                "InvalidNodeType": 3,
                "InvalidClient": 4,
                "FailedToResolveNode": 5,
                "InvalidObjectNode": 6,
                "FailedToReadAttributes": 7,
                "FailedToSetupMonitoring": 8
            }
        }
        Property { name: "nodeId"; type: "OpcUaNodeIdType"; isPointer: true }
        Property { name: "connection"; type: "OpcUaConnection"; isPointer: true }
        Property { name: "readyToUse"; type: "bool"; isReadonly: true }
        Property { name: "status"; type: "OpcUaNode::Status"; isReadonly: true }
        Property { name: "errorMessage"; type: "string"; isReadonly: true }
        Property { name: "browseName"; type: "string" }
        Property { name: "nodeClass"; type: "QOpcUa::NodeClass"; isReadonly: true }
        Property { name: "displayName"; type: "QOpcUaLocalizedText" }
        Property { name: "description"; type: "QOpcUaLocalizedText" }
        Signal {
            name: "nodeIdChanged"
            Parameter { name: "nodeId"; type: "const OpcUaNodeIdType"; isPointer: true }
        }
        Signal {
            name: "connectionChanged"
            Parameter { type: "OpcUaConnection"; isPointer: true }
        }
        Signal { name: "nodeChanged" }
        Method {
            name: "setNodeId"
            Parameter { name: "nodeId"; type: "OpcUaNodeIdType"; isPointer: true }
        }
        Method {
            name: "setConnection"
            Parameter { type: "OpcUaConnection"; isPointer: true }
        }
        Method {
            name: "getSourceTimestamp"
            type: "QDateTime"
            Parameter { type: "QOpcUa::NodeAttribute" }
        }
        Method {
            name: "getServerTimestamp"
            type: "QDateTime"
            Parameter { type: "QOpcUa::NodeAttribute" }
        }
    }
    Component {
        name: "OpcUaNodeId"
        prototype: "OpcUaNodeIdType"
        exports: ["QtOpcUa/NodeId 5.12"]
        exportMetaObjectRevisions: [0]
        Property { name: "ns"; type: "string" }
        Property { name: "identifier"; type: "string" }
        Signal {
            name: "nodeNamespaceChanged"
            Parameter { type: "string" }
        }
        Signal {
            name: "identifierChanged"
            Parameter { type: "string" }
        }
        Signal { name: "nodeChanged" }
    }
    Component {
        name: "OpcUaNodeIdType"
        prototype: "QObject"
        exports: ["QtOpcUa/NodeIdType 5.12"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Signal {
            name: "nodeNamespaceChanged"
            Parameter { type: "string" }
        }
        Signal {
            name: "identifierChanged"
            Parameter { type: "string" }
        }
        Signal { name: "nodeChanged" }
    }
    Component {
        name: "OpcUaReadItemFactory"
        prototype: "QObject"
        exports: ["QtOpcUa/ReadItem 5.13"]
        isCreatable: false
        isSingleton: true
        exportMetaObjectRevisions: [0]
        Method { name: "create"; type: "OpcUaReadItem" }
    }
    Component {
        name: "OpcUaRelativeNodeId"
        prototype: "OpcUaNodeIdType"
        exports: ["QtOpcUa/RelativeNodeId 5.12"]
        exportMetaObjectRevisions: [0]
        Property { name: "startNode"; type: "OpcUaNodeIdType"; isPointer: true }
        Property { name: "path"; type: "OpcUaRelativeNodePath"; isList: true; isReadonly: true }
        Signal {
            name: "startNodeChanged"
            Parameter { name: "startNode"; type: "OpcUaNodeIdType"; isPointer: true }
        }
        Method {
            name: "setStartNode"
            Parameter { name: "startNode"; type: "OpcUaNodeIdType"; isPointer: true }
        }
    }
    Component {
        name: "OpcUaRelativeNodePath"
        prototype: "QObject"
        exports: ["QtOpcUa/RelativeNodePath 5.12"]
        exportMetaObjectRevisions: [0]
        Property { name: "ns"; type: "string" }
        Property { name: "browseName"; type: "string" }
        Property { name: "referenceType"; type: "QOpcUa::ReferenceTypeId" }
        Property { name: "includeSubtypes"; type: "bool" }
        Property { name: "isInverse"; type: "bool" }
        Signal {
            name: "nodeNamespaceChanged"
            Parameter { name: "ns"; type: "string" }
        }
        Signal {
            name: "browseNameChanged"
            Parameter { name: "browseName"; type: "string" }
        }
        Signal {
            name: "referenceTypeChanged"
            Parameter { name: "referenceType"; type: "QOpcUa::ReferenceTypeId" }
        }
        Signal {
            name: "includeSubtypesChanged"
            Parameter { name: "includeSubtypes"; type: "bool" }
        }
        Signal {
            name: "isInverseChanged"
            Parameter { name: "isInverse"; type: "bool" }
        }
        Method {
            name: "setNodeNamespace"
            Parameter { name: "ns"; type: "string" }
        }
        Method {
            name: "setBrowseName"
            Parameter { name: "browseName"; type: "string" }
        }
        Method {
            name: "setReferenceType"
            Parameter { name: "referenceType"; type: "QOpcUa::ReferenceTypeId" }
        }
        Method {
            name: "setIncludeSubtypes"
            Parameter { name: "includeSubtypes"; type: "bool" }
        }
        Method {
            name: "setIsInverse"
            Parameter { name: "isInverse"; type: "bool" }
        }
    }
    Component {
        name: "OpcUaServerDiscovery"
        prototype: "QStandardItemModel"
        exports: ["QtOpcUa/ServerDiscovery 5.13"]
        exportMetaObjectRevisions: [0]
        Property { name: "discoveryUrl"; type: "string" }
        Property { name: "count"; type: "int"; isReadonly: true }
        Property { name: "status"; type: "OpcUaStatus"; isReadonly: true }
        Property { name: "connection"; type: "OpcUaConnection"; isPointer: true }
        Signal { name: "serversChanged" }
        Signal {
            name: "connectionChanged"
            Parameter { type: "OpcUaConnection"; isPointer: true }
        }
        Method {
            name: "at"
            type: "QOpcUaApplicationDescription"
            Parameter { name: "row"; type: "int" }
        }
    }
    Component {
        name: "OpcUaStatus"
        exports: ["QtOpcUa/Status 5.13"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Enum {
            name: "Status"
            values: {
                "Good": 0,
                "BadUnexpectedError": 32769,
                "BadInternalError": 32770,
                "BadOutOfMemory": 32771,
                "BadResourceUnavailable": 32772,
                "BadCommunicationError": 32773,
                "BadEncodingError": 32774,
                "BadDecodingError": 32775,
                "BadEncodingLimitsExceeded": 32776,
                "BadRequestTooLarge": 32952,
                "BadResponseTooLarge": 32953,
                "BadUnknownResponse": 32777,
                "BadTimeout": 32778,
                "BadServiceUnsupported": 32779,
                "BadShutdown": 32780,
                "BadServerNotConnected": 32781,
                "BadServerHalted": 32782,
                "BadNothingToDo": 32783,
                "BadTooManyOperations": 32784,
                "BadTooManyMonitoredItems": 32987,
                "BadDataTypeIdUnknown": 32785,
                "BadCertificateInvalid": 32786,
                "BadSecurityChecksFailed": 32787,
                "BadCertificateTimeInvalid": 32788,
                "BadCertificateIssuerTimeInvalid": 32789,
                "BadCertificateHostNameInvalid": 32790,
                "BadCertificateUriInvalid": 32791,
                "BadCertificateUseNotAllowed": 32792,
                "BadCertificateIssuerUseNotAllowed": 32793,
                "BadCertificateUntrusted": 32794,
                "BadCertificateRevocationUnknown": 32795,
                "BadCertificateIssuerRevocationUnknown": 32796,
                "BadCertificateRevoked": 32797,
                "BadCertificateIssuerRevoked": 32798,
                "BadCertificateChainIncomplete": 33037,
                "BadUserAccessDenied": 32799,
                "BadIdentityTokenInvalid": 32800,
                "BadIdentityTokenRejected": 32801,
                "BadSecureChannelIdInvalid": 32802,
                "BadInvalidTimestamp": 32803,
                "BadNonceInvalid": 32804,
                "BadSessionIdInvalid": 32805,
                "BadSessionClosed": 32806,
                "BadSessionNotActivated": 32807,
                "BadSubscriptionIdInvalid": 32808,
                "BadRequestHeaderInvalid": 32810,
                "BadTimestampsToReturnInvalid": 32811,
                "BadRequestCancelledByClient": 32812,
                "BadTooManyArguments": 32997,
                "GoodSubscriptionTransferred": 45,
                "GoodCompletesAsynchronously": 46,
                "GoodOverload": 47,
                "GoodClamped": 48,
                "BadNoCommunication": 32817,
                "BadWaitingForInitialData": 32818,
                "BadNodeIdInvalid": 32819,
                "BadNodeIdUnknown": 32820,
                "BadAttributeIdInvalid": 32821,
                "BadIndexRangeInvalid": 32822,
                "BadIndexRangeNoData": 32823,
                "BadDataEncodingInvalid": 32824,
                "BadDataEncodingUnsupported": 32825,
                "BadNotReadable": 32826,
                "BadNotWritable": 32827,
                "BadOutOfRange": 32828,
                "BadNotSupported": 32829,
                "BadNotFound": 32830,
                "BadObjectDeleted": 32831,
                "BadNotImplemented": 32832,
                "BadMonitoringModeInvalid": 32833,
                "BadMonitoredItemIdInvalid": 32834,
                "BadMonitoredItemFilterInvalid": 32835,
                "BadMonitoredItemFilterUnsupported": 32836,
                "BadFilterNotAllowed": 32837,
                "BadStructureMissing": 32838,
                "BadEventFilterInvalid": 32839,
                "BadContentFilterInvalid": 32840,
                "BadFilterOperatorInvalid": 32961,
                "BadFilterOperatorUnsupported": 32962,
                "BadFilterOperandCountMismatch": 32963,
                "BadFilterOperandInvalid": 32841,
                "BadFilterElementInvalid": 32964,
                "BadFilterLiteralInvalid": 32965,
                "BadContinuationPointInvalid": 32842,
                "BadNoContinuationPoints": 32843,
                "BadReferenceTypeIdInvalid": 32844,
                "BadBrowseDirectionInvalid": 32845,
                "BadNodeNotInView": 32846,
                "BadServerUriInvalid": 32847,
                "BadServerNameMissing": 32848,
                "BadDiscoveryUrlMissing": 32849,
                "BadSempahoreFileMissing": 32850,
                "BadRequestTypeInvalid": 32851,
                "BadSecurityModeRejected": 32852,
                "BadSecurityPolicyRejected": 32853,
                "BadTooManySessions": 32854,
                "BadUserSignatureInvalid": 32855,
                "BadApplicationSignatureInvalid": 32856,
                "BadNoValidCertificates": 32857,
                "BadIdentityChangeNotSupported": 32966,
                "BadRequestCancelledByRequest": 32858,
                "BadParentNodeIdInvalid": 32859,
                "BadReferenceNotAllowed": 32860,
                "BadNodeIdRejected": 32861,
                "BadNodeIdExists": 32862,
                "BadNodeClassInvalid": 32863,
                "BadBrowseNameInvalid": 32864,
                "BadBrowseNameDuplicated": 32865,
                "BadNodeAttributesInvalid": 32866,
                "BadTypeDefinitionInvalid": 32867,
                "BadSourceNodeIdInvalid": 32868,
                "BadTargetNodeIdInvalid": 32869,
                "BadDuplicateReferenceNotAllowed": 32870,
                "BadInvalidSelfReference": 32871,
                "BadReferenceLocalOnly": 32872,
                "BadNoDeleteRights": 32873,
                "UncertainReferenceNotDeleted": 16572,
                "BadServerIndexInvalid": 32874,
                "BadViewIdUnknown": 32875,
                "BadViewTimestampInvalid": 32969,
                "BadViewParameterMismatch": 32970,
                "BadViewVersionInvalid": 32971,
                "UncertainNotAllNodesAvailable": 16576,
                "GoodResultsMayBeIncomplete": 186,
                "BadNotTypeDefinition": 32968,
                "UncertainReferenceOutOfServer": 16492,
                "BadTooManyMatches": 32877,
                "BadQueryTooComplex": 32878,
                "BadNoMatch": 32879,
                "BadMaxAgeInvalid": 32880,
                "BadSecurityModeInsufficient": 32998,
                "BadHistoryOperationInvalid": 32881,
                "BadHistoryOperationUnsupported": 32882,
                "BadInvalidTimestampArgument": 32957,
                "BadWriteNotSupported": 32883,
                "BadTypeMismatch": 32884,
                "BadMethodInvalid": 32885,
                "BadArgumentsMissing": 32886,
                "BadTooManySubscriptions": 32887,
                "BadTooManyPublishRequests": 32888,
                "BadNoSubscription": 32889,
                "BadSequenceNumberUnknown": 32890,
                "BadMessageNotAvailable": 32891,
                "BadInsufficientClientProfile": 32892,
                "BadStateNotActive": 32959,
                "BadTcpServerTooBusy": 32893,
                "BadTcpMessageTypeInvalid": 32894,
                "BadTcpSecureChannelUnknown": 32895,
                "BadTcpMessageTooLarge": 32896,
                "BadTcpNotEnoughResources": 32897,
                "BadTcpInternalError": 32898,
                "BadTcpEndpointUrlInvalid": 32899,
                "BadRequestInterrupted": 32900,
                "BadRequestTimeout": 32901,
                "BadSecureChannelClosed": 32902,
                "BadSecureChannelTokenUnknown": 32903,
                "BadSequenceNumberInvalid": 32904,
                "BadProtocolVersionUnsupported": 32958,
                "BadConfigurationError": 32905,
                "BadNotConnected": 32906,
                "BadDeviceFailure": 32907,
                "BadSensorFailure": 32908,
                "BadOutOfService": 32909,
                "BadDeadbandFilterInvalid": 32910,
                "UncertainNoCommunicationLastUsableValue": 16527,
                "UncertainLastUsableValue": 16528,
                "UncertainSubstituteValue": 16529,
                "UncertainInitialValue": 16530,
                "UncertainSensorNotAccurate": 16531,
                "UncertainEngineeringUnitsExceeded": 16532,
                "UncertainSubNormal": 16533,
                "GoodLocalOverride": 150,
                "BadRefreshInProgress": 32919,
                "BadConditionAlreadyDisabled": 32920,
                "BadConditionAlreadyEnabled": 32972,
                "BadConditionDisabled": 32921,
                "BadEventIdUnknown": 32922,
                "BadEventNotAcknowledgeable": 32955,
                "BadDialogNotActive": 32973,
                "BadDialogResponseInvalid": 32974,
                "BadConditionBranchAlreadyAcked": 32975,
                "BadConditionBranchAlreadyConfirmed": 32976,
                "BadConditionAlreadyShelved": 32977,
                "BadConditionNotShelved": 32978,
                "BadShelvingTimeOutOfRange": 32979,
                "BadNoData": 32923,
                "BadBoundNotFound": 32983,
                "BadBoundNotSupported": 32984,
                "BadDataLost": 32925,
                "BadDataUnavailable": 32926,
                "BadEntryExists": 32927,
                "BadNoEntryExists": 32928,
                "BadTimestampNotSupported": 32929,
                "GoodEntryInserted": 162,
                "GoodEntryReplaced": 163,
                "UncertainDataSubNormal": 16548,
                "GoodNoData": 165,
                "GoodMoreData": 166,
                "BadAggregateListMismatch": 32980,
                "BadAggregateNotSupported": 32981,
                "BadAggregateInvalidInputs": 32982,
                "BadAggregateConfigurationRejected": 32986,
                "GoodDataIgnored": 217,
                "BadRequestNotAllowed": 32996,
                "GoodEdited": 220,
                "GoodPostActionFailed": 221,
                "UncertainDominantValueChanged": 16606,
                "GoodDependentValueChanged": 224,
                "BadDominantValueChanged": 32993,
                "UncertainDependentValueChanged": 16610,
                "BadDependentValueChanged": 32995,
                "GoodCommunicationEvent": 167,
                "GoodShutdownEvent": 168,
                "GoodCallAgain": 169,
                "GoodNonCriticalTimeout": 170,
                "BadInvalidArgument": 32939,
                "BadConnectionRejected": 32940,
                "BadDisconnect": 32941,
                "BadConnectionClosed": 32942,
                "BadInvalidState": 32943,
                "BadEndOfStream": 32944,
                "BadNoDataAvailable": 32945,
                "BadWaitingForResponse": 32946,
                "BadOperationAbandoned": 32947,
                "BadExpectedStreamToBlock": 32948,
                "BadWouldBlock": 32949,
                "BadSyntaxError": 32950,
                "BadMaxConnectionsReached": 32951
            }
        }
        Property { name: "isGood"; type: "bool"; isReadonly: true }
        Property { name: "isBad"; type: "bool"; isReadonly: true }
        Property { name: "status"; type: "Status"; isReadonly: true }
    }
    Component {
        name: "OpcUaValueNode"
        prototype: "OpcUaNode"
        exports: ["QtOpcUa/ValueNode 5.12"]
        exportMetaObjectRevisions: [0]
        Property { name: "value"; type: "QVariant" }
        Property { name: "serverTimestamp"; type: "QDateTime"; isReadonly: true }
        Property { name: "sourceTimestamp"; type: "QDateTime"; isReadonly: true }
        Signal {
            name: "valueChanged"
            Parameter { name: "value"; type: "QVariant" }
        }
        Method {
            name: "setValue"
            Parameter { type: "QVariant" }
        }
    }
    Component {
        name: "QOpcUaApplicationDescription"
        exports: ["QtOpcUa/ApplicationDescription 5.13"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Enum {
            name: "ApplicationType"
            values: {
                "Server": 0,
                "Client": 1,
                "ClientAndServer": 2,
                "DiscoveryServer": 3
            }
        }
        Property { name: "applicationUri"; type: "string"; isReadonly: true }
        Property { name: "productUri"; type: "string"; isReadonly: true }
        Property { name: "applicationName"; type: "QOpcUaLocalizedText"; isReadonly: true }
        Property {
            name: "applicationType"
            type: "QOpcUaApplicationDescription::ApplicationType"
            isReadonly: true
        }
        Property { name: "gatewayServerUri"; type: "string"; isReadonly: true }
        Property { name: "discoveryProfileUri"; type: "string"; isReadonly: true }
        Property { name: "discoveryUrls"; type: "QList<QString>"; isReadonly: true }
    }
    Component {
        name: "QStandardItemModel"
        prototype: "QAbstractItemModel"
        Property { name: "sortRole"; type: "int" }
        Signal {
            name: "itemChanged"
            Parameter { name: "item"; type: "QStandardItem"; isPointer: true }
        }
    }
}
