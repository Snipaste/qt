/****************************************************************************
**
** Copyright (C) 2019 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the tools applications of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:GPL-EXCEPT$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** GNU General Public License Usage
** Alternatively, this file may be used under the terms of the GNU
** General Public License version 3 as published by the Free Software
** Foundation with exceptions as appearing in the file LICENSE.GPL3-EXCEPT
** included in the packaging of this file. Please review the following
** information to ensure the GNU General Public License requirements will
** be met: https://www.gnu.org/licenses/gpl-3.0.html.
**
** $QT_END_LICENSE$
**
****************************************************************************/

/*!
    \qmltype AbstractParent
    \inqmlmodule QDoc.Test
    \qmlabstract
    \brief Abstract base QML type.
*/

/*!
    \qmlproperty list<Child> AbstractParent::children
    \qmldefault
    \brief Children of the type.
*/

/*!
    \qmlmethod void AbstractParent::rear(Child child, var method =  Strict)
    \brief Do some abstract parenting on \a child using a specific \a method.
*/

/*!
    \qmlproperty string AbstractParent::name
    \brief Name of this parent.
*/

/*!
    \qmlmethod void AbstractParent::name(Child child, name)
    \brief Name a \a child using \a name.

*/

/*!
    \qmlmethod void AbstractParent::name()
    \brief Name all children with random names.
*/

/*!
    \qmltype Child
    \inqmlmodule QDoc.Test
    \inherits AbstractParent
    \brief A Child inheriting its parent.
*/

/*!
    //! override from abstract base
    \qmlproperty string Child::name
    \brief Name of this child.
*/

/*!
    //! override from abstract base
    \qmlmethod void Child::name(Child child, name)
    \brief Name a \a child of this child using \a name.
*/

/*!
    \qmlbasictype int
    \inqmlmodule QDoc.Test

    \brief An integer basic type.
*/

/*!
    \qmlmethod int int::abs()
    Returns the absolute value of this integer.
*/

/*!
    \qmltype InternParent
    \inqmlmodule QDoc.Test
    \internal
    \qmlabstract
    \brief Internal abstract base QML type.
*/

/*!
    \qmlproperty int InternParent::prop
    \brief Propagated to inheriting type docs.
*/

/*!
    \qmltype YetAnotherChild
    \inherits InternParent
    \inqmlmodule QDoc.Test
    \brief A type inheriting from internal abstract parent.
*/
