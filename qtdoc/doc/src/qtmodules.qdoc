/****************************************************************************
**
** Copyright (C) 2021 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the documentation of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:FDL$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** GNU Free Documentation License Usage
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of
** this file. Please review the following information to ensure
** the GNU Free Documentation License version 1.3 requirements
** will be met: https://www.gnu.org/licenses/fdl-1.3.html.
** $QT_END_LICENSE$
**
****************************************************************************/

/*!
    \page qtmodules.html
    \title All Modules
    \brief A list of all modules in Qt 6.

    \ingroup classlists

    \brief Qt consists of essential modules, add-on modules, and tools.

    \section1 Qt Essentials

    Qt Essentials define the foundation of Qt on all platforms. They are
    available on all supported development platforms and on the tested target
    platforms. Except the testing modules, which will remain source compatible,
    these modules will remain source and binary compatible throughout Qt 6.

    Essential modules are general and useful for a majority of Qt applications.
    A module that is used for a special purpose is considered an add-on module
    even if it is available on all supported platforms.

    The following table lists the Qt essentials:

    \table 80%
    \header
        \li Module
        \li Description
    \row
        \li \l[QtCore]{Qt Core}
        \li Core non-graphical classes used by other modules.
    \row
        \li \l[QtDBus]{Qt D-Bus}
        \li Classes for inter-process communication over the D-Bus protocol.
    \row
        \li \l[QtGui]{Qt GUI}
        \li Base classes for graphical user interface (GUI) components.
    \row
        \li \l[QtNetwork]{Qt Network}
        \li Classes to make network programming easier and more portable.
    \row
        \li \l[QtQml]{Qt QML}
        \li Classes for QML and JavaScript languages.
    \row
        \li \l[QtQuick]{Qt Quick}
        \li A declarative framework for building highly dynamic applications
            with custom user interfaces.
    \row \li \l{Qt Quick Controls}
         \li Provides lightweight QML types for creating performant user
             interfaces for desktop, embedded, and mobile devices. These
             types employ a simple styling architecture and are very efficient.
    \row
        \li \l[QtQuickDialogs]{Qt Quick Dialogs}
        \li Types for creating and interacting with system dialogs from a
            Qt Quick application.
    \row
        \li \l[QtQuickLayouts]{Qt Quick Layouts}
        \li Layouts are items that are used to arrange Qt Quick 2 based items in
            the user interface.
    \row
        \li \l[QtQuickTest]{Qt Quick Test}
        \li A unit test framework for QML applications, where the test cases
            are written as JavaScript functions.
            \note The binary compatibility guarantee does not apply to Qt Quick
                  Test. However, it will remain source compatible.
    \row
        \li \l[QtTestLib]{Qt Test}
        \li Classes for unit testing Qt applications and libraries.
            \note The binary compatibility guarantee does not apply to Qt Test.
                  However, it will remain source compatible.
    \row
        \li \l[QtWidgets]{Qt Widgets}
        \li Classes to extend Qt GUI with C++ widgets.
    \endtable

    \section1 Qt Add-Ons

    \e{Qt Add-On} modules bring additional value for specific purposes. These
    modules may only be available on some development platform. Many add-on
    modules are either feature-complete and exist for backwards compatibility,
    or are only applicable to certain platforms. Each add-on module specifies
    its compatibility promise separately.

    The Qt installers include the option of downloading the add-ons. For more
    information, visit the \l{Getting Started with Qt} page.

    The following table lists the Qt add-ons:

    \table 80%
    \header
        \li Module
        \li Development Platforms
        \li Target Platforms
        \li Description
    \row
        \li \l[ActiveQt]{Active Qt}
        \li \l{Qt for Windows}{Windows}
        \li \l{Qt for Windows}{Windows}
        \li Classes for applications which use ActiveX and COM
    \row
        \li \l{Qt Bluetooth}{Qt Bluetooth}
        \li All
        \li \l{Qt for Android}{Android}, \l{Qt for iOS}{iOS}, \l{Qt for Linux/X11}{Linux}, \l{Boot2Qt}{Boot to Qt}, \l{Qt for macOS}{macOS}
            and \l{Qt for Windows}{Windows}
        \li Provides access to Bluetooth hardware.
    \row
         \li \l[Qt3D]{Qt 3D}
         \li All
         \li All
         \li Functionality for near-realtime simulation systems with support
             for 2D and 3D rendering.
    \row
         \li \l{Qt 5 Core Compatibility APIs}
         \li All
         \li All
         \li Qt Core APIs that were in Qt 5 but not Qt 6.
    \row
        \li \l[QtConcurrent]{Qt Concurrent}
        \li All
        \li All
        \li Classes for writing multi-threaded programs without using low-level
            threading primitives.
    \row
        \li \l{Qt Help}
        \li All
        \li All
        \li Classes for integrating documentation into applications.
    \row
        \li \l[QtImageFormats]{Qt Image Formats}
        \li All
        \li All
        \li Plugins for additional image formats: TIFF, MNG, TGA, WBMP.
    \row
        \li \l[QtOpenGL]{Qt OpenGL}
        \li All
        \li All
        \li C++ classes that make it easy to use OpenGL in Qt applications.
            A separate library of \l{Qt OpenGL Widgets C++ Classes} provides a widget for
            rendering OpenGL graphics.
    \row
        \li \l{Qt Multimedia}
         \li All
         \li All*
         \li A rich set of QML types and C++ classes to handle multimedia content.
            Also includes APIs to handle camera access.
    \row
        \li \l[QtPrintSupport]{Qt Print Support}
        \li All
        \li All
        \li Classes to make printing easier and more portable.
    \row
        \li \l{Qt Quick Widgets C++ Classes}{Qt Quick Widgets}
        \li All
        \li All
        \li Provides a C++ widget class for displaying a Qt Quick user interface.
    \row
        \li \l{Qt Remote Objects}
        \li All
        \li All
        \li Provides an easy to use mechanism for sharing a QObject's API
             (Properties/Signals/Slots) between processes or devices.
    \row
        \li \l{Qt SCXML}{Qt SCXML}
        \li All
        \li All
        \li Provides classes and tools for creating state machines from SCXML files and
            embedding them in applications.
    \row
        \li \l[QtSensors]{Qt Sensors}
        \li All
        \li \l{Qt for Android}{Android}, \l{Qt for iOS}{iOS},
            and \l{Qt for Windows}{Windows}
        \li Provides access to sensor hardware.
    \row
        \li \l{Qt Serial Bus}{Qt Serial Bus}
        \li All
        \li \l{Qt for Linux/X11}{Linux}, \l{Boot2Qt}{Boot to Qt}, \l{Qt for macOS}{macOS}
            and \l{Qt for Windows}{Windows}
        \li Provides access to serial industrial bus interfaces. Currently, the module
            supports the CAN bus and Modbus protocols.
    \row
        \li \l{Qt Serial Port}{Qt Serial Port}
        \li All
        \li \l{Qt for Linux/X11}{Linux}, \l{Boot2Qt}{Boot to Qt}, \l{Qt for macOS}{macOS}
            and \l{Qt for Windows}{Windows}
        \li Provides classes to interact with hardware and virtual serial ports.
    \row
        \li \l[QtSql]{Qt SQL}
        \li All
        \li All
        \li Classes for database integration using SQL.
    \row
        \li \l{Qt State Machine}{Qt State Machine}
        \li All
        \li All
        \li Provides classes for creating and executing state graphs.
    \row
        \li \l[QtSvg]{Qt SVG}
        \li All
        \li All
        \li Classes for displaying the contents of SVG files. Supports a subset of the
            \l{http://www.w3.org/TR/SVGTiny12/}{SVG 1.2 Tiny} standard.
            A separate library of \l{Qt SVG Widgets C++ Classes} provides support for
            rendering SVG files in a widget UI.
    \row
        \li \l[QtUITools]{Qt UI Tools}
        \li All
        \li All
        \li Classes for loading QWidget based forms created in \QD dynamically, at runtime.
    \row
        \li \l[QtWebChannel]{Qt WebChannel}
        \li All
        \li All
        \li Provides access to QObject or QML objects from HTML clients for seamless
            integration of Qt applications with HTML/JavaScript clients.
    \row
        \li \l[QtWebEngine]{Qt WebEngine}
        \li All
        \li \l{Qt for Windows}{Windows}, \l{Qt for Linux/X11}{Linux}, and \l{Qt for macOS}{\macos}.
        \li Classes and functions for embedding web content in applications using the
            \l{http://www.chromium.org/Home}{Chromium browser project}.
    \row
        \li \l[QtWebSockets]{Qt WebSockets}
        \li All
        \li All
        \li Provides \WebSocket communication compliant with \l{https://datatracker.ietf.org/doc/html/rfc6455} {RFC 6455}.
    \row \li \l[QtWebView]{Qt WebView}
         \li All
         \li Platforms with a native web engine.
         \li Displays web content in a QML application by using APIs native to the platform,
             without the need to include a full web browser stack.
    \row
        \li \l[QtXml]{Qt XML}
        \li All
        \li All
        \li Handling of XML in a Document Object Model (DOM) API.
    \row
        \li \l[QtPositioning]{Qt Positioning}
        \li All
        \li \l{Qt for Android}{Android}, \l{Qt for iOS}{iOS}, \l{Qt for macOS}{macOS},
            \l{Qt for Linux/X11}{Linux} and \l{Qt for Windows}{Windows}
        \li Provides access to position, satellite info and area monitoring classes.
    \row
        \li \l[QtNFC]{Qt NFC}
        \li All
        \li \l{Qt for Android}{Android} and \l{Qt for iOS}{iOS}
        \li Provides access to Near-Field communication (NFC) hardware.
    \row
    \header
        \li {4,1} \target gpl-licensed-addons
                  Add-ons available under Commercial Licenses, or GNU General
                  Public License v3
    \row
        \li \l{Qt Charts}
        \li All
        \li All
        \li UI Components for displaying visually pleasing charts,
            driven by static or dynamic data models.
    \row
        \li \l{Qt Data Visualization}
        \li All
        \li All
        \li UI Components for creating stunning 3D data visualizations.
    \row
        \li \l{Qt Lottie Animation}
        \li All
        \li All
        \li A QML API for rendering graphics and animations in JSON format,
            exported by the \l Bodymovin plugin for Adobe® After Effects.
    \row
        \li \l[QtNetworkAuth]{Qt Network Authorization}
        \li All
        \li All
        \li Provides support for OAuth-based authorization to online services.
    \row
        \li \l[QtQuick3D]{Qt Quick 3D}
        \li All
        \li All
        \li Provides a high-level API for creating 3D content or UIs based on
            Qt Quick.
    \row
        \li \l[Qt Quick Timeline]{Qt Quick Timeline}
        \li All
        \li All
        \li Enables keyframe-based animations and parameterization.
    \row
        \li \l[QtShaderTools]{Qt Shader Tools}
        \li All
        \li All
        \li Provides tools for the cross-platform Qt shader pipeline. These enable
        processing graphics and compute shaders to make them usable for Qt Quick and other
        components in the Qt ecosystem.
    \row
        \li \l{Qt Virtual Keyboard}
        \li All
        \li \l{Qt for Linux/X11}{Linux} and \l{Qt for Windows}{Windows}
            desktop, and \l{Boot2Qt}{Boot to Qt} targets.
        \li A framework for implementing different input methods as
            well as a QML virtual keyboard. Supports localized keyboard
            layouts and custom visual themes.
    \row
        \li \l{Qt Wayland Compositor}
        \li \l{Qt for Linux/X11}{Linux}
        \li \l{Qt for Linux/X11}{Linux} and \l{Boot2Qt}{Boot to Qt} targets.
        \li Provides a framework to develop a Wayland compositor.
   \endtable

    \note \b{All*} refers to all supported platforms except QNX and INTEGRITY.

    \section1 Where to Go from Here

    We invite you to explore the rest of Qt. We prepared overviews which help
    you decide which APIs to use and our examples demonstrate how to use our
    API.

    \list
    \li \l{Qt Overviews} - list of topics about application development
    \li \l{Qt Examples and Tutorials}{Examples and Tutorials} - code samples and tutorials
    \li \l{Qt Reference Pages} - a listing of C++ and QML APIs
    \li \l{Changes to Supported Modules} - status of Qt 5 modules in Qt 6.0
    \endlist

*/
