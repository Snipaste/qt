/****************************************************************************
**
** Copyright (C) 2020 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the documentation of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:FDL$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** GNU Free Documentation License Usage
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of
** this file. Please review the following information to ensure
** the GNU Free Documentation License version 1.3 requirements
** will be met: https://www.gnu.org/licenses/fdl-1.3.html.
** $QT_END_LICENSE$
**
****************************************************************************/

/*!
    \page qt3d-changes-qt6.html
    \title Changes to Qt3D

    Qt 6 is a result of the conscious effort to make the framework more
    efficient and easy to use.

    We try to maintain binary and source compatibility for all the public
    APIs in each release. But some changes were inevitable in an effort to
    make Qt a better framework.

    In this topic we summarize those changes in Qt3D, and provide guidance
    to handle them.

    \section1 New rendering backend

    Over the course of 5.14 and 5.15, the rendering backend was gradually
    moved into a plugin.

    Qt 6 release completes this work and introduces a new RHI based rendering
    backend which will enable use of Vulkan, Metal or DirectX on the relevant
    platforms.

    The RHI backend is the default but this can be controlled by setting
    environment variables as explained \l {Qt 3D Render C++ Classes} {here}.

    \section1 Code changes

    Some classes have changed modules. In particular, the QBuffer, QAttribute
    and QGeometry classes (along with associated helper classes) have moved
    from the Render module to the Core module.

    \section1 New API

    \list
    \li \l {Qt3DCore::QGeometryView} provides all details for a mesh
    \li \l {Qt3DCore::QBoundingVolume} provides a way of querying or overriding
        the size of the axis aligned bounding box of a geometry
    \li \l {Qt3DRender::QPickingProxy} provides a way of specifying an alternative
        (usually simpler) geometry for picking
    \li \l {Qt3DCore::QAbstractAspect} and \l {Qt3DCore::QAspectJob} add methods
        to facilitate and optimize the synchronization of backend operations.
    \endlist
*/
