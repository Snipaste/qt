/****************************************************************************
**
** Copyright (C) 2021 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the documentation of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:FDL$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** GNU Free Documentation License Usage
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of
** this file. Please review the following information to ensure
** the GNU Free Documentation License version 1.3 requirements
** will be met: https://www.gnu.org/licenses/fdl-1.3.html.
** $QT_END_LICENSE$
**
****************************************************************************/

/*!
    \example modelviewclient
    \title Model-View Client

    This is the client-side application that accompanies the
    \l {Model-View Server}.

    This example showcases how to make a very simple client program which
    displays the content and changes made on a server.

    \snippet modelviewclient/main.cpp ObjectNode creation

    We start by creating a QRemoteObjectNode and connecting it to a registry
    found on the local machine. We also set a
    \l{QRemoteObjectNode::heartbeatInterval}{heartbeat interval}.
    The heartbeat is useful to detect if the connection to the \l{Source} has
    been disrupted. In this case, since all the traffic is local, it would
    detect when the server has been closed.

    \snippet modelviewclient/main.cpp Model acquisition

    We then \l {QRemoteObjectNode::acquireModel}{acquire} the model which
    contains all of our data. In this case, we're looking to acquire a model
    named \c{RemoteModel} from the remote object network we are connected to.

    \snippet modelviewclient/main.cpp QTreeView-creation

    And finally, we display the model in a very basic application.
*/
